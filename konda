/*#include<iostream>
#include<bits/stdc++.h>
using namespace std;
#define LEN 100
float en[LEN][1]={0},de[LEN][1]={0},msg[LEN][1],m[2][2];
int l;
void getkey()
{
    int i,j,k=0;
    char key[4],mes[LEN];
    cout<<"enter key: "<<endl;
    cin>>key;
    for(i=0;i<2;i++){
        for(j=0;j<2;j++){
            m[i][j]=int(toupper(key[k]))%65;
            k++;
        } 
    }
    cout<<"enter string"<<endl;
    cin>>mes;
    l=strlen(mes);
    for(i=0;i<l;i++)
    	msg[i][0]=toupper(mes[i])%65;
}

void enc()
{
    int i,k;
    for(i=0;i<l;i+=2){
    	for(k=0;k<2;k++){
    		en[i][0]+=m[i%2][k]*msg[i+k][0];
   			en[i+1][0]+=m[(i+1)%2][k]*msg[i+k][0];
		}
	}
    cout<<endl;
    for(k=0;k<i;k++)
     cout<<(char)(((int)en[k][0]%26)+65);
}

void dec()
{
    int i,k;
    float det=m[0][0]*m[1][1]-m[0][1]*m[1][0];
    float inv[2][2];
    inv[0][0]=m[1][1]/det;
    inv[1][1]=m[0][0]/det;
    inv[0][1]=-m[0][1]/det;
    inv[1][0]=-m[1][0]/det;
    for(i=0;i<l;i+=2)
    {
        for(k=0;k<2;k++){
            de[i][0]+=inv[i%2][k]*en[i+k][0];
            de[i+1][0]+=inv[(i+1)%2][k]*en[i+k][0];
        }
    }
    cout<<endl;
    cout<<"decrypt"<<endl;
    for(k=0;k<i;k++)
    	cout<<(char)(((int)de[k][0]%26)+65);
    
}
int main() {
    getkey();
    enc();
    dec();
    return 0;
}*/
#include <iostream>
#include <cstring>
using namespace std;

#define LEN 100

float en[LEN][1] = {0}, de[LEN][1] = {0}, msg[LEN][1] = {0}, m[2][2];
int l;

void getkey() {
    int i, j;
    int k = 0;
    char t[LEN], key[4];
    
    cout << "Enter the key (4 characters): ";
    cin >> key;

    if (strlen(key) != 4) {
        cout << "Key must be exactly 4 characters." << endl;
        exit(1);
    }

    for (i = 0; i < 2; i++) {
        for (j = 0; j < 2; j++) {
            m[i][j] = toupper(key[k]) % 65;
            k++;
        }
    }

    cout << "Enter the message: ";
    cin >> t;
    
    l = strlen(t);
    if (l % 2 != 0) {
        t[l] = 'X'; // Padding with 'X' if the length is odd
        t[l+1] = '\0';
        l++;
    }

    for (i = 0; i < l; i++) {
        msg[i][0] = toupper(t[i]) % 65;
    }
}

void enc() {
    int i, j;
    
    for (i = 0; i < l; i += 2) {
        for (j = 0; j < 2; j++) {
            en[i][0] += m[j][0] * msg[i + j][0];
            en[i + 1][0] += m[j][1] * msg[i + j][0];
        }
    }

    cout << "Encrypted message: ";
    for (i = 0; i < l; i++) {
        cout << (char)(((int)en[i][0] % 26) + 65);
    }
    cout << endl;
}

void dec() {
    int i, j;
    float det = m[0][0] * m[1][1] - m[1][0] * m[0][1];
    
    if (det == 0) {
        cout << "The key matrix is not invertible." << endl;
        exit(1);
    }

    float inv[2][2];
    inv[0][0] = m[1][1] / det;
    inv[1][1] = m[0][0] / det;
    inv[0][1] = -m[0][1] / det;
    inv[1][0] = -m[1][0] / det;

    for (i = 0; i < l; i += 2) {
        for (j = 0; j < 2; j++) {
            de[i][0] += inv[j][0] * en[i + j][0];
            de[i + 1][0] += inv[j][1] * en[i + j][0];
        }
    }

    cout << "Decrypted message: ";
    for (i = 0; i < l; i++) {
        cout << (char)(((int)de[i][0] % 26) + 65);
    }
    cout << endl;
}

int main() {
    getkey();
    enc();
    dec();
    return 0;
}

